name: Update Postman Collection

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

env:
  OPENAPI_FILE: specs/auth-api.yml
  COLLECTION_FILE: postman/collections/saasus-auth-api.json

jobs:
  update-postman-collection:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check if OpenAPI file has changed
      id: check_openapi_changes
      run: |
        if git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD | grep -q "$OPENAPI_FILE"; then
          echo "openapi_changed=true" >> $GITHUB_OUTPUT
          echo "OpenAPI file has been modified"
        else
          echo "openapi_changed=false" >> $GITHUB_OUTPUT
          echo "OpenAPI file has not been modified"
        fi

    - name: Generate Postman Collection
      if: steps.check_openapi_changes.outputs.openapi_changed == 'true'
      run: |
        echo "Generating Postman collection from OpenAPI spec..."
        
        # Use the dedicated conversion script
        node scripts/convert-openapi.js
        
        if [ -f "$COLLECTION_FILE" ]; then
          echo "‚úÖ Collection generated successfully: $COLLECTION_FILE"
        else
          echo "‚ùå Error: Generated collection not found at $COLLECTION_FILE"
          exit 1
        fi

    - name: Preserve Collection ID
      if: steps.check_openapi_changes.outputs.openapi_changed == 'true'
      run: |
        if [ -f "$COLLECTION_FILE" ]; then
          # If collection file already exists in the repo, preserve its ID
          if git show origin/${{ github.event.pull_request.base.ref }}:$COLLECTION_FILE > /tmp/existing_collection.json 2>/dev/null; then
            echo "Preserving existing collection ID..."
            EXISTING_ID=$(jq -r '.info._postman_id' /tmp/existing_collection.json)
            if [ "$EXISTING_ID" != "null" ] && [ -n "$EXISTING_ID" ]; then
              echo "Found existing collection ID: $EXISTING_ID"
              # Update the generated collection with the existing ID
              jq --arg id "$EXISTING_ID" '.info._postman_id = $id' $COLLECTION_FILE > /tmp/updated_collection.json
              mv /tmp/updated_collection.json $COLLECTION_FILE
              echo "Collection ID preserved"
            else
              echo "No existing collection ID found, using generated ID"
            fi
          else
            echo "No existing collection file found, using generated ID"
          fi
        fi

    - name: Commit and push generated collection
      if: steps.check_openapi_changes.outputs.openapi_changed == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if [ -f "$COLLECTION_FILE" ]; then
          git add $COLLECTION_FILE
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: auto-generate postman collection from OpenAPI"
            git push origin ${{ github.event.pull_request.head.ref }}
            echo "Postman collection updated and pushed"
          fi
        else
          echo "Collection file not found, skipping commit"
        fi

    - name: Add PR comment
      if: steps.check_openapi_changes.outputs.openapi_changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const collectionFile = process.env.COLLECTION_FILE;
          
          let comment = 'ü§ñ **Postman Collection Updated**\n\n';
          comment += `The OpenAPI specification has been updated, and the Postman collection has been automatically regenerated.\n\n`;
          comment += `üìÅ Updated file: \`${collectionFile}\`\n`;
          comment += `üìã Collection name: SaaSus API Test\n\n`;
          comment += `Please review the generated collection to ensure it meets your requirements.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
